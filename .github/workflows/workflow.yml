name: Test Workflow

on:
  push:
    branches:
      - main
    
env:
  BUILD_NUMBER: ${{ github.run_number }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16' # or whichever version you're using

      - name: Cache Node modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-
          
      - name: Install Dependencies
        run: npm install

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-docker-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-docker-

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build Docker Image
        run: |
          docker buildx build --cache-from=type=local,src=/tmp/.buildx-cache \
                              --cache-to=type=local,dest=/tmp/.buildx-cache-new \
                              -t ${{ github.repository }}:${{ env.BUILD_NUMBER }} .
      
      - name: Push Image to Docker Hub
        run: docker push ${{ github.repository }}:${{ env.BUILD_NUMBER }}

      - name: Tag Image as Latest
        run: docker tag ${{ github.repository }}:${{ env.BUILD_NUMBER }} ${{ github.repository }}:latest
      
      - name: Push Latest Tag to Docker Hub
        run: docker push ${{ github.repository }}:latest

  test-job:
    runs-on: ubuntu-latest
    needs: ["build-and-push"]
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
            username: ${{ vars.DOCKERHUB_USERNAME }}
            password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Pull Image from Docker Hub
        run: docker pull ${{ github.repository }}:${{ env.BUILD_NUMBER }}

      - name: Run Tests
        run: docker run ${{ github.repository }}:${{ env.BUILD_NUMBER }} npm test

  deployment: 
    runs-on: ubuntu-latest
    needs: ["test-job"]
    steps:
      - name: Execute remote SSH commands for deployment
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.VPS_PASSWORD }}
          script: |
              sudo docker pull ${{ github.repository }}:${{ env.BUILD_NUMBER }}
              sudo docker run -d -p 3002:3001 --name devops-s4-container-temp ${{ github.repository }}:${{ env.BUILD_NUMBER }}
              sleep 5
              sudo docker stop devops-s4-container || true
              sudo docker rm devops-s4-container || true
              sudo docker rename devops-s4-container-temp devops-s4-container
              sudo docker image prune -f
